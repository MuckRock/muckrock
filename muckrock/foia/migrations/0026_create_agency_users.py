# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-06-12 14:54
from __future__ import unicode_literals

from django.db import migrations

from email.utils import parseaddr
import datetime
import phonenumbers
import re


def unique_username(base_username, AgencyUser):
    """Get a unique username"""
    base_username = base_username.replace(' ', '')
    base_username = re.sub('[^\w\-.@]', '', base_username)[:30]
    username = base_username
    num = 1
    while AgencyUser.objects.filter(username__iexact=username).exists():
        postfix = str(num)
        username = '%s%s' % (base_username[:30 - len(postfix)], postfix)
        num += 1
    return username


def create_agency_users(apps, schema_editor):
    """Create new agency users based on agency emails"""
    Agency = apps.get_model('agency', 'Agency')
    AgencyProfile = apps.get_model('agency', 'AgencyProfile')
    AgencyUser = apps.get_model('accounts', 'AgencyUser')
    Profile = apps.get_model('accounts', 'Profile')
    FOIARequest = apps.get_model('foia', 'FOIARequest')
    FOIACommunication = apps.get_model('foia', 'FOIACommunication')

    def create_agency_user(email, agency, name=''):
        email = email.strip()
        if not email or email.endswith('muckrock.com'):
            return
        if email.endswith('@fax2.faxaway.com'):
            number = phonenumbers.parse(email.split('@')[0], 'US')
            fax = phonenumbers.format_number(number,
                    phonenumbers.PhoneNumberFormat.NATIONAL)
        else:
            fax = None
        exists = AgencyUser.objects.filter(email=email).exists()
        fax_exists = fax and AgencyUser.objects.filter(profile__fax=fax).exists()
        if name:
            if ',' in name:
                last_name, first_name = name.split(',', 1)
            elif ' ' in name:
                first_name, last_name = name.rsplit(' ', 1)
            else:
                first_name, last_name = name, ''
        if exists or fax_exists:
            if exists:
                user = AgencyUser.objects.get(email=email)
            elif fax_exists:
                user = AgencyUser.objects.get(profile__fax=fax)
            if user.profile.acct_type != 'agency':
                return user

            if name and (not user.first_name or not user.last_name):
                user.first_name = first_name[:30]
                user.last_name = last_name[:30]
                user.save()

            AgencyProfile.objects.get_or_create(
                    user=user,
                    agency=agency,
                    )
            return user
        else:
            if name:
                user_args = {
                    'first_name': first_name[:30],
                    'last_name': last_name[:30],
                    }
            else:
                user_args = {}

            if fax:
                profile_args = {'fax': fax}
            else:
                user_args['email'] = email
                profile_args = {}
            user = AgencyUser.objects.create(
                    username=unique_username(email, AgencyUser),
                    **user_args
                    )

            Profile.objects.create(
                    user=user,
                    acct_type='agency',
                    email_pref='never',
                    date_update=datetime.date.today(),
                    **profile_args
                    )
            AgencyProfile.objects.create(
                    user=user,
                    agency=agency,
                    )
            return user

    foias = FOIARequest.objects.exclude(agency=None)
    total = len(foias)
    for i, foia in enumerate(foias):
        if i % 10 == 0:
            print '{} out of {} foias'.format(i, total)
        if foia.email:
            user = create_agency_user(foia.email, foia.agency)
            if user:
                foia.contacts.add(user)
        for email in foia.other_emails.split(','):
            if not email:
                continue
            user = create_agency_user(email, foia.agency)
            if user:
                foia.cc_contacts.add(user)

    comms = (FOIACommunication.objects
            .exclude(foia=None)
            .exclude(foia__agency=None)
            .exclude(priv_from_who=''))
    total = len(comms)

    for i, comm in enumerate(comms):
        if i % 10 == 0:
            print '{} out of {} comms'.format(i, total)
        name, email = parseaddr(comm.priv_from_who)
        user = create_agency_user(email, comm.foia.agency, name=name)
        comm.from_user = user


class Migration(migrations.Migration):

    dependencies = [
        ('foia', '0025_foiacommunication_cc_users'),
        ('accounts', '0018_auto_20160608_2034'),
        ('agency', '0013_create_default_agency_users'),
    ]

    operations = [
        migrations.RunPython(create_agency_users, lambda a, s: None),
    ]

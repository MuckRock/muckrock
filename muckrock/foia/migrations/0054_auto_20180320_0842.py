# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2018-03-20 12:42
from __future__ import unicode_literals

# Django
from django.db import migrations
from django.utils import timezone

# Standard Library
from datetime import datetime


def make_aware(dt):
    if dt is None:
        return None
    return timezone.make_aware(datetime.combine(dt, datetime.min.time()))


def convert_composers(apps, schema_editor):
    FOIARequest = apps.get_model('foia', 'FOIARequest')
    FOIAMultiRequest = apps.get_model('foia', 'FOIAMultiRequest')
    FOIAComposer = apps.get_model('foia', 'FOIAComposer')
    OutboundComposerAttachment = apps.get_model(
        'foia', 'OutboundComposerAttachment'
    )
    ContentType = apps.get_model('contenttypes', 'ContentType')
    Tag = apps.get_model('tags', 'Tag')
    TaggedItemBase = apps.get_model('tags', 'TaggedItemBase')

    def convert_multi(multi):
        if multi.parent is not None and multi.parent.composer is None:
            convert_multi(multi.parent)
        composer = FOIAComposer.objects.create(
            user=multi.user,
            title=multi.title,
            slug=multi.slug,
            status=multi.status,
            requested_docs=multi.requested_docs,
            embargo=multi.embargo,
            parent=multi.parent.composer if multi.parent else None,
            num_org_requests=multi.num_org_requests,
            num_monthly_requests=multi.num_monthly_requests,
            num_reg_requests=multi.num_reg_requests,
        )
        composer.agencies.set(multi.agencies.all())
        ct_multi = ContentType.objects.get(model='foiamultirequest')
        ct_comp = ContentType.objects.get(model='foiacomposer')
        tags = Tag.objects.filter(
            tags_taggeditembase_items__content_type=ct_multi,
            tags_taggeditembase_items__object_id=multi.pk,
        )
        for tag in tags:
            TaggedItemBase.objects.create(
                tag=tag,
                content_type=ct_comp,
                object_id=composer.pk,
            )
        multi.composer = composer
        multi.save()
        if multi.foias.exists():
            composer.datetime_submitted = make_aware(
                multi.foias.first().date_submitted
            )
            composer.save()
            multi.foias.all().update(composer=composer)

    def convert_foia(foia):
        if foia.parent is not None and foia.parent.composer is None:
            convert_foia(foia.parent)
        composer = FOIAComposer.objects.create(
            user=foia.user,
            title=foia.title,
            slug=foia.slug,
            status='started' if foia.status == 'started' else 'filed',
            requested_docs=foia.requested_docs,
            datetime_submitted=make_aware(foia.date_submitted),
            embargo=foia.embargo,
            parent=foia.parent.composer if foia.parent else None,
        )
        if foia.agency:
            composer.agencies.add(foia.agency)
        # do tags manually due to missing functionality in migrations #
        ct_foia = ContentType.objects.get(model='foiarequest')
        ct_comp = ContentType.objects.get(model='foiacomposer')
        tags = Tag.objects.filter(
            tags_taggeditembase_items__content_type=ct_foia,
            tags_taggeditembase_items__object_id=foia.pk,
        )
        for tag in tags:
            TaggedItemBase.objects.create(
                tag=tag,
                content_type=ct_comp,
                object_id=composer.pk,
            )
        # end tag code #
        foia.composer = composer
        if foia.status == 'started' and foia.communications.exists():
            composer.edited_boilerplate = True
            composer.requested_docs = foia.communications.first().communication
            composer.save()
            for attachment in foia.pending_attachments.all():
                new_attachment = OutboundComposerAttachment(
                    composer=composer,
                    user=attachment.user,
                    date_time_stamp=attachment.date_time_stamp,
                    sent=attachment.sent,
                )
                new_attachment.ffile.name = attachment.ffile.name
                new_attachment.save()
            foia.delete()
        elif foia.status == 'started':
            foia.delete()
        else:
            if foia.parent and foia.parent.pk is None:
                foia.parent = None
            foia.save()

    total_multi = FOIAMultiRequest.objects.count()
    for i, multi in (
        enumerate(
            FOIAMultiRequest.objects.all().select_related('parent__composer')
            .prefetch_related('agencies', 'foias')
        )
    ):
        if i % 100 == 0:
            print 'Multi: {} / {}'.format(i, total_multi)
        convert_multi(multi)
    total_foia = FOIARequest.objects.filter(composer=None).count()
    for i, foia in (
        enumerate(
            FOIARequest.objects.filter(composer=None).select_related(
                'parent__composer', 'agency'
            ).iterator()
        )
    ):
        if i % 100 == 0:
            print 'FOIA: {} / {}'.format(i, total_foia)
        convert_foia(foia)


class Migration(migrations.Migration):

    dependencies = [
        ('foia', '0053_auto_20180323_1548_squashed_0060_auto_20180413_1102'),
        ('tags', '0002_remove_tag_user'),
        ('contenttypes', '0001_initial'),
    ]

    operations = [migrations.RunPython(convert_composers)]

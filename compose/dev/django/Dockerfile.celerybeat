# syntax = docker/dockerfile:experimental
FROM python:3.8

ENV PYTHONUNBUFFERED 1

ARG AWS_ACCESS_KEY_ID
ENV AWS_ACCESS_KEY_ID $AWS_ACCESS_KEY_ID

ARG AWS_SECRET_ACCESS_KEY
ENV AWS_SECRET_ACCESS_KEY $AWS_SECRET_ACCESS_KEY

ARG REDIS_URL
ENV REDIS_URL $REDIS_URL

ARG POSTGRES_USER
ENV POSTGRES_USER $POSTGRES_USER

ARG POSTGRES_DB
ENV POSTGRES_DB $POSTGRES_DB

ARG POSTGRES_PASSWORD
ENV POSTGRES_PASSWORD $POSTGRES_PASSWORD

ARG POSTGRES_HOST
ENV POSTGRES_HOST $POSTGRES_HOST

ARG POSTGRES_PORT
ENV POSTGRES_PORT $POSTGRES_PORT


RUN apt-get update && apt-get install -y --no-install-recommends \
  postgresql-client \
  libmemcached-dev

# install NVM
ENV NVM_DIR /usr/local/nvm
ENV NODE_VERSION 5.6.0

RUN mkdir $NVM_DIR
RUN curl https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash \
  && . $NVM_DIR/nvm.sh \
  && nvm install $NODE_VERSION \
  && nvm alias default $NODE_VERSION \
  && nvm use default

ENV NODE_PATH $NVM_DIR/v$NODE_VERSION/lib/node_modules
ENV PATH      $NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH

# Requirements are installed here to ensure they will be cached.
COPY ./pip /pip
RUN --mount=type=cache,target=/root/.cache/pip pip install -r /pip/requirements.txt
RUN --mount=type=cache,target=/root/.cache/pip pip install -r /pip/dev-requirements.txt

COPY . /app/
WORKDIR /app

RUN mv compose/dev/django/celery/beat/start entrypoint
RUN chmod +x entrypoint

ENTRYPOINT ["/app/entrypoint"]
